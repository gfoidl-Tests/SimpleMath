jobs:
  - job: build_and_test
    displayName: build and test
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
      - bash: yarn install
        displayName: install node modules

      - bash: yarn run build
        displayName: build

      - bash: yarn run build-esm
        displayName: build-esm

      - bash: yarn run lint
        displayName: lint

      - bash: yarn run test-results
        displayName: test

      - bash: yarn run test-coverage
        displayName: test (coverage)
        condition: always()
      
      - task: PublishTestResults@2
        condition: always()
        inputs:
          testRunner: JUnit
          testResultsFiles: 'out/tests/test-results.xml'

      - task: PublishCodeCoverageResults@1
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: 'coverage/cobertura-coverage.xml'

      - bash: |
          # There could also be an entry in the script-section of package.json to run this
          yarn ts-node .tools/publish-package-json.ts

          cp Readme.md lib
        displayName: prepare package

      - task: CopyFiles@2
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
        inputs:
          sourceFolder: lib
          contents: '**'
          targetFolder: $(Build.ArtifactStagingDirectory)

      - task: PublishPipelineArtifact@1
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
        inputs:
          targetPath: $(Build.ArtifactStagingDirectory)
          artifactName: drop

      - bash: |
          cd lib
          yarn pack
          ls -la
        displayName: package tar-ball

      - publish: lib/*.tgz
        artifact: tarball

      - bash: yarn run doc-create
        displayName: create docs

      - publish: doc
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
        artifact: docs
